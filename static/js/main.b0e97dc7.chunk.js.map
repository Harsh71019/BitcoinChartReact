{"version":3,"sources":["chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","data","options","App","state","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","theme","palette","info","main","pointBackgroundColor","error","pointBorderColor","borderWidth","lineTension","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","subscribe","channels","name","product_ids","this","ws","WebSocket","onopen","send","JSON","stringify","onmessage","e","value","parse","oldBtcDataSet","newBtcDataSet","push","price","newChartData","concat","Date","toLocaleTimeString","setState","close","classes","className","React","Component","withStyles","height","withTheme","Boolean","window","location","hostname","match","createMuiTheme","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yPAMeA,EAFD,SAAAC,GAAK,OAAI,kBAAC,OAAD,CAAMC,KAAMD,EAAMC,KAAMC,QAASF,EAAME,WCMxDC,G,mNACJC,MAAQ,CACNC,cAAe,CACbC,OAAQ,GACRC,SAAU,CACR,CACEC,KAAM,OACNC,MAAO,UACPC,gBAAiB,mBACjBC,YAAa,EAAKX,MAAMY,MAAMC,QAAQC,KAAKC,KAC3CC,qBAAsB,EAAKhB,MAAMY,MAAMC,QAAQI,MAAMF,KACrDG,iBAAkB,EAAKlB,MAAMY,MAAMC,QAAQI,MAAMF,KACjDI,YAAa,IACbC,YAAa,GACbnB,KAAM,MAIZoB,iBAAkB,CAChBC,YAAY,EACZC,qBAAqB,EACrBC,SAAU,CACRC,SAAS,GAEXC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,UAAU,EACVC,cAAe,S,kEAQN,IAAD,OACZC,EAAY,CAChBvB,KAAM,YACNwB,SAAU,CACR,CACEC,KAAM,SACNC,YAAa,CAAC,cAKpBC,KAAKC,GAAK,IAAIC,UAAU,0BAExBF,KAAKC,GAAGE,OAAS,WACf,EAAKF,GAAGG,KAAKC,KAAKC,UAAUV,KAG9BI,KAAKC,GAAGM,UAAY,SAACC,GACnB,IAAMC,EAAQJ,KAAKK,MAAMF,EAAE1C,MAC3B,GAAmB,WAAf2C,EAAMpC,KAAV,CAIA,IAAMsC,EAAgB,EAAK1C,MAAMC,cAAcE,SAAS,GAClDwC,EAAa,eAAQD,GAC3BC,EAAc9C,KAAK+C,KAAKJ,EAAMK,OAE9B,IAAMC,EAAY,2BACb,EAAK9C,MAAMC,eADE,IAEhBE,SAAU,CAACwC,GACXzC,OAAQ,EAAKF,MAAMC,cAAcC,OAAO6C,QACtC,IAAIC,MAAOC,wBAGf,EAAKC,SAAS,CAAEjD,cAAe6C,Q,6CAKjCf,KAAKC,GAAGmB,U,+BAGA,IACAC,EAAYrB,KAAKnC,MAAjBwD,QAER,OACE,yBAAKC,UAAWD,EAAQ,oBACtB,wBAAIC,UAAU,UAAd,mDAGA,kBAAC,EAAD,CACExD,KAAMkC,KAAK/B,MAAMC,cACjBH,QAASiC,KAAK/B,MAAMiB,wB,GAzFZqC,IAAMC,YAgGTC,eAtGA,SAAChD,GAAD,MAAY,CACzB,kBAAmB,CACjBiD,OAAQ,QAoGsB,CAAEC,WAAW,GAAhCF,CAAwCzD,GC9FnC4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCZAvD,EAAQwD,cAEdC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAkB3D,MAAOA,GACvB,kBAAC,EAAD,OAFJ,KAKA4D,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/D,GACLgE,QAAQhE,MAAMA,EAAMiE,a","file":"static/js/main.b0e97dc7.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst Chart = props => <Line data={props.data} options={props.options} />;\r\n\r\nexport default Chart;","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\nimport \"./App.css\";\nconst styles = (theme) => ({\n  \"chart-container\": {\n    height: 600,\n  },\n});\n\nclass App extends React.Component {\n  state = {\n    lineChartData: {\n      labels: [],\n      datasets: [\n        {\n          type: \"line\",\n          label: \"BTC-USD\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderColor: this.props.theme.palette.info.main,\n          pointBackgroundColor: this.props.theme.palette.error.main,\n          pointBorderColor: this.props.theme.palette.error.main,\n          borderWidth: \"2\",\n          lineTension: 0.2,\n          data: [],\n        },\n      ],\n    },\n    lineChartOptions: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        enabled: true,\n      },\n      scales: {\n        xAxes: [\n          {\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10,\n            },\n          },\n        ],\n      },\n    },\n  };\n\n  componentDidMount() {\n    const subscribe = {\n      type: \"subscribe\",\n      channels: [\n        {\n          name: \"ticker\",\n          product_ids: [\"BTC-USD\"],\n        },\n      ],\n    };\n\n    this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\n\n    this.ws.onopen = () => {\n      this.ws.send(JSON.stringify(subscribe));\n    };\n\n    this.ws.onmessage = (e) => {\n      const value = JSON.parse(e.data);\n      if (value.type !== \"ticker\") {\n        return;\n      }\n\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\n      const newBtcDataSet = { ...oldBtcDataSet };\n      newBtcDataSet.data.push(value.price);\n\n      const newChartData = {\n        ...this.state.lineChartData,\n        datasets: [newBtcDataSet],\n        labels: this.state.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        ),\n      };\n      this.setState({ lineChartData: newChartData });\n    };\n  }\n\n  componentWillUnmount() {\n    this.ws.close();\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <h1 className=\"header\">\n          Bitcoin Live Data Chart Updating Every Second!!\n        </h1>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nconst theme = createMuiTheme();\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <App />\n    </MuiThemeProvider>,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}